{
  "custom": {},
  "params": {},
  "props": {
    "defaultSize": {
      "width": 1200
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "printer_cards"
        },
        "position": {
          "basis": "350px"
        },
        "propConfig": {
          "props.instances": {
            "binding": {
              "config": {
                "queryPath": "select_active_printers",
                "returnFormat": "json"
              },
              "transforms": [
                {
                  "code": "\tdevices \u003d [{\u0027device-static\u0027: {\u0027id\u0027: device.id, \u0027name\u0027: device.name}} for device in value]\n\tdevices.sort(key\u003dlambda x: x[\u0027device-static\u0027][\u0027name\u0027])\n\treturn devices",
                  "type": "script"
                }
              ],
              "type": "query"
            }
          }
        },
        "props": {
          "path": "embedded/printer",
          "style": {
            "backgroundColor": "#EEEEEEFF",
            "borderColor": "#DDDDDDFF",
            "borderLeftWidth": 0,
            "borderRightWidth": 0,
            "borderStyle": "solid"
          },
          "useDefaultViewHeight": false
        },
        "type": "ia.display.flex-repeater"
      },
      {
        "meta": {
          "name": "spacer"
        },
        "position": {
          "basis": "15px",
          "shrink": 0
        },
        "type": "ia.display.label"
      },
      {
        "children": [
          {
            "meta": {
              "name": "spacer_1"
            },
            "position": {
              "basis": "205px",
              "shrink": 0
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "spacer_0"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "upcoming_events_title"
            },
            "position": {
              "basis": "325px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Font_Header3",
                "fontWeight": "bold",
                "textAlign": "center"
              },
              "text": "Upcoming Events"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "spacer"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "upcoming_events_title_0"
            },
            "position": {
              "basis": "75px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Font_Text",
                "textAlign": "center"
              },
              "text": "Relative"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "ToggleSwitch"
            },
            "position": {
              "basis": "55px",
              "shrink": 0
            },
            "props": {
              "selected": true
            },
            "type": "ia.input.toggle-switch"
          },
          {
            "meta": {
              "name": "upcoming_events_title_1"
            },
            "position": {
              "basis": "75px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Font_Text",
                "textAlign": "center"
              },
              "text": "Absolute"
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "basis": "50px"
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "spacer_1"
        },
        "position": {
          "basis": "15px"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "upcoming_events"
        },
        "position": {
          "basis": "320px",
          "grow": 1
        },
        "propConfig": {
          "props.instances": {
            "binding": {
              "config": {
                "polling": {
                  "enabled": true,
                  "rate": "30"
                },
                "queryPath": "select_active_printers",
                "returnFormat": "json"
              },
              "transforms": [
                {
                  "code": "\tfrom datetime import datetime, timedelta\n\timport json\n\t\n\timport eiger_api_utils\n\t\n\tAPI_URL \u003d \"https://www.eiger.io/api/v2\"\n\tAUTH \u003d eiger_api_utils.get_auth_raw(\"/var/lib/ignition/eiger_api.key\")\n\tNOW \u003d datetime.now()\n\tTURNOVER_TIME \u003d timedelta(hours\u003d2)\n\t\n\tevents \u003d []\n\t\n\tfor device in value:\n\t\tnext_event_time \u003d NOW\n\t\n\t\t# Get device data\n\t\tdevice_status \u003d json.loads(system.net.httpGet(\"{}/devices/{}\".format(API_URL, device.id), 2000, 2000, *AUTH))\n\t\t# Check if there\u0027s a print - if there is, add a \"Finish\" event\n\t\tif \"print_job\" in device_status.keys():\n\t\t\tnext_event_time +\u003d eiger_api_utils.parse_timeleft(device_status[\"timeLeft\"])\n\t\t\tevents.append(\n\t\t\t\t{\n\t\t\t\t\t\"device-static\": {\n\t\t\t\t\t\t\"id\": device.id,\n\t\t\t\t\t\t\"name\": device.name,\n\t\t\t\t\t},\n\t\t\t\t\t\"event\": {\n\t\t\t\t\t\t\"print\": device_status[\"print_job\"][\"title\"],\n\t\t\t\t\t\t\"state\": 2,\n\t\t\t\t\t\t\"time\": int(eiger_api_utils.parse_timeleft(device_status[\"timeLeft\"]).total_seconds()),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t# Check print queue. Each print gets a \"Start\" \u0026 \"Finish\" event\n\t\tdevice_queue \u003d json.loads(system.net.httpGet(\"{}/devices/{}/queued_printjobs\".format(API_URL, device.id), 2000, 2000, *AUTH))\n\t\t\n\t\tdevice_queue \u003d [_print for _print in device_queue if _print[\"_id\"] !\u003d \"00000000-0000-0000-0000-000000000000\"]\n\t\tfor _print in device_queue:\n\t\t\tnext_event_time +\u003d TURNOVER_TIME\n\t\t\t# Register \"Start\" event\n\t\t\tevents.append(\n\t\t\t\t{\n\t\t\t\t\t\"device-static\": {\n\t\t\t\t\t\t\"id\": device.id,\n\t\t\t\t\t\t\"name\": device.name,\n\t\t\t\t\t},\n\t\t\t\t\t\"event\": {\n\t\t\t\t\t\t\"print\": _print[\"print\"][\"title\"],\n\t\t\t\t\t\t\"state\": 1,\n\t\t\t\t\t\t\"time\": int((next_event_time - NOW).total_seconds()),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t\tnext_event_time +\u003d timedelta(seconds\u003d_print[\"print\"][\"stats\"][\"patherTimeEstimate\"])\n\t\t\t# Register \"End\" event\n\t\t\tevents.append(\n\t\t\t\t{\n\t\t\t\t\t\"device-static\": {\n\t\t\t\t\t\t\"id\": device.id,\n\t\t\t\t\t\t\"name\": device.name,\n\t\t\t\t\t},\n\t\t\t\t\t\"event\": {\n\t\t\t\t\t\t\"print\": _print[\"print\"][\"title\"],\n\t\t\t\t\t\t\"state\": 2,\n\t\t\t\t\t\t\"time\": int((next_event_time - NOW).total_seconds()),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\tevents.sort(key\u003dlambda x: x[\"event\"][\"time\"])\n\treturn events",
                  "type": "script"
                }
              ],
              "type": "query"
            }
          }
        },
        "props": {
          "alignContent": "space-between",
          "direction": "column",
          "path": "embedded/event",
          "style": {
            "backgroundColor": "#EEEEEEFF",
            "borderBottomWidth": 2,
            "borderColor": "#DDDDDDFF",
            "borderLeftWidth": 0,
            "borderRightWidth": 0,
            "borderStyle": "solid",
            "borderTopWidth": 2
          },
          "useDefaultViewWidth": false
        },
        "type": "ia.display.flex-repeater"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "alignContent": "space-around",
      "direction": "column"
    },
    "type": "ia.container.flex"
  }
}
